package net.su.custmr.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import net.su.custmr.service.PushService;
import net.su.custmr.valueObject.OrdrValueObject;
import net.su.custmr.valueObject.PushValueObject;
import net.su.logger.Logger;
import net.su.prodct.service.ProdctService;
import net.su.prodct.valueObject.ProdctValueObject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * Handles requests for the application home page.
 */
@Controller
public class PushController {
	@Resource
	private PushService pushService;
	@Resource
	private  ProdctService prodctService;
	
	/**
	* 푸시 알림 메인 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushNotfcatnMain.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushNotfcatnMain(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  메인 조회 컨트롤러 입니다.");
		int dateOption = 1;
		dateOption = pushVo.getDateOption();
		Map<String, Object> map = pushService.pushNotfcatnMain(dateOption);
		model.addAttribute("pushNotfcatnDayStatstcs", map.get("pushNotfcatnDayStatstcs"));
		model.addAttribute("pushNotfcatnWekStatstcs", map.get("pushNotfcatnWekStatstcs"));
		model.addAttribute("pushNotfcatnMonthStatstcs", map.get("pushNotfcatnMonthStatstcs"));
		model.addAttribute("pushNotfcatnStatstcsGraph", map.get("pushNotfcatnStatstcsGraph"));
		model.addAttribute("pushNotfcatnStatstcsGraphSum", map.get("pushNotfcatnStatstcsGraphSum"));
		
		return "custmr/push/PushNotfcatnMain";
	}
	/**
	* 푸시 알림 발송 목록 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushNotfcatnDespSelectList.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushNotfcatnDespList(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  발송 목록 조회 컨트롤러 입니다.");
		List<PushValueObject> pushNotfcatnList= pushService.pushNotfcatnList(pushVo);
		
		model.addAttribute("pushNotfcatnList", pushNotfcatnList);
		
		return "custmr/push/PushNotfcatnDespList";
	}
	/**
	* 푸시 알림 발송 불러오기 템플릿 목록 팝업 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushImprtTempltListPopup.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushImprtTempltListPopup(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  발송 불러오기 템플릿 목록 팝업 조회 컨트롤러 입니다.");
		List<PushValueObject> pushNotfcatnList= pushService.pushNotfcatnList(pushVo);
		
		model.addAttribute("pushVo", pushVo);	// 검색 조건, 페이지 정보들
		model.addAttribute("pushNotfcatnList", pushNotfcatnList);
		
		return "custmr/push/PushNotfcatnImprtTempltPopup";
	}
	/**
	* 푸시 알림 템플릿 목록 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushNotfcatnTempltSelectList.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushNotfcatnTempltSelectList(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  템플릿 목록 조회 컨트롤러 입니다.");
		List<PushValueObject> pushNotfcatnList= pushService.pushNotfcatnList(pushVo);
		
		model.addAttribute("pushVo", pushVo);	// 검색 조건, 페이지 정보들
		model.addAttribute("pushNotfcatnList", pushNotfcatnList);
		
		return "custmr/push/PushNotfcatnTempltList";
	}
	/**
	* 푸시 알림 템플릿 등록 화면 팝업 이동을 하는 메서드입니다.
	*
	* @param   Model model, @ModelAttribute("PushValueObject") PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	//푸시알립 템플릿 등록 팝업
	@RequestMapping(value = "/pushTempltIsertPopup.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushTempltIsertPopup(Model model, @ModelAttribute("PushValueObject") PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  템플릿 등록 화면 팝업 컨트롤러 입니다.");
		
		return "custmr/push/templtInsertPopup";
	}
	/**
	* 푸시 알림 템플릿 등록를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/PushNotfcatnTempltInsert.do", method={RequestMethod.GET,RequestMethod.POST})
	public @ResponseBody PushValueObject pushNotfcatnTempltInsert(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  템플릿 등록 컨트롤러 입니다.");
		pushService.pushNotfcatTempltInsert(pushVo);
		
		return pushVo;
	}
	/**
	* 푸시 알림 템플릿 상세 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushNotfcatnTempltSelectDetlPopup.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushNotfcatnTempltSelectDetl(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  템플릿 상세 조회 컨트롤러 입니다.");
		PushValueObject pushNotfcatnTempltSelectDetl = pushService.pushNotfcatnTempltSelectDetl(pushVo.getPushNotfcatnSeq());
		
		model.addAttribute("pushNotfcatnTempltSelectDetl", pushNotfcatnTempltSelectDetl);
		
		return "custmr/push/PushNotfcatnSelectDetlPopup";
	}
	/**
	* 푸시 알림 템플릿 삭제를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo,@RequestParam(value="pushAllDelete[]") List<String> allCheck
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushTempltDelete.do", method={RequestMethod.GET,RequestMethod.POST})
	public @ResponseBody List<String> pushTempltDelete(Model model, PushValueObject pushVo,@RequestParam(value="pushAllDelete[]") List<String> allCheck)throws Exception{
		Logger.info("푸시알림  템플릿 삭제 컨트롤러 입니다.");
		ArrayList<String> pushTempltAllCheck = new ArrayList<String>();
		for(int i=0; i<allCheck.size(); i++){
			pushTempltAllCheck.add(allCheck.get(i));
			System.out.println("##########"+pushTempltAllCheck);
		}
		pushService.pushTempltDelete(pushTempltAllCheck);
		
		return pushTempltAllCheck;
	}
	/**
	* 푸시 알림 템플릿 수정화면으로 이동 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushTempltUpdate.do", method={RequestMethod.GET,RequestMethod.POST})
	public @ResponseBody PushValueObject pushTempltUpdateFrm(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  템플릿 수정화면으로 이동 컨트롤러 입니다.");
		pushService.pushNotfcatnTempltUpdate(pushVo);
		
		return pushVo;
	}
	/**
	* 푸시 알림 수신자 전체 팝업 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushNotfcatnRecpntAllPopup.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushModalAllSearchPopup(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  수신자 전체 팝업 조회 컨트롤러 입니다.");
		List<OrdrValueObject> pushRecpntAll = pushService.pushRecpntAll(pushVo);
		
		model.addAttribute("PushRecpntAll", pushRecpntAll);
		model.addAttribute("pushVo", pushVo);
				
		return "custmr/push/PushNotfcatnRecpntAllPopup";
	}
	/**
	* 푸시 알림 수신자 상품 팝업 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushNotfcatnRecpntProdctPopup.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushNotfcatnRecpntProdctPopup(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  수신자 상품 팝업  조회 컨트롤러 입니다.");
		List<PushValueObject> pushRecpntProdct = pushService.pushRecpntProdct(pushVo);
		model.addAttribute("pushRecpntProdct", pushRecpntProdct);
		model.addAttribute("pushVo", pushVo);
				
		return "custmr/push/PushNotfcatnRecpntProdctPopup";
	}
	/**
	* 푸시 알림 수신자 상품 선택 시 고객 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVoRecpntProdctCustmr
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushRecpntProdctCustmr.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushRecpntProdctCustmr(Model model, PushValueObject pushVoRecpntProdctCustmr)throws Exception{
		Logger.info("푸시알림  수신자 상품 선택 시 고객  조회 컨트롤러 입니다.");
		List<PushValueObject> pushRecpntProdctCustmr = pushService.pushRecpntProdctCustmr(pushVoRecpntProdctCustmr);
		model.addAttribute("pushRecpntProdctCustmr", pushRecpntProdctCustmr);
		model.addAttribute("pushVoRecpntProdctCustmr", pushVoRecpntProdctCustmr);
		
		return "custmr/push/PushNotfcatnRecpntProdctPopup";
	}
	/**
	* 푸시 알림 수신자 카테고리 리스트 팝업 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushRecpntCatgrPopup.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushRecpntCatgrPopup(Model model, ProdctValueObject prodctValueObject)throws Exception{
		Logger.info("푸시알림  수신자 카테고리 리스트 팝업 조회 컨트롤러 입니다.");
		String[] topCatgrArray= prodctService.catgrList("기본","");
		String[] midCatgrArray=prodctService.catgrList("대",prodctValueObject.getTopCatgrNme());
		String[] botCatgrArray=prodctService.catgrList("중",prodctValueObject.getMidCatgrNme());
		
		model.addAttribute("ProdctValueObject",prodctValueObject);
		model.addAttribute("topCatgrArray",topCatgrArray);
		model.addAttribute("midCatgrArray",midCatgrArray);
		model.addAttribute("botCatgrArray",botCatgrArray);
		
		model.addAttribute("pageType",1);
		
		return "custmr/push/PushNotfcatnRecpntCatgrPopup";
	}
	/**
	* 푸시 알림 수신자 패키지 리스트 팝업 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushRecpntPackgPopup.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushRecpntPackgPopup(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림  수신자 패키지 리스트 팝업 조회 컨트롤러 입니다.");
		List<PushValueObject> pushRecpntPackg = pushService.pushRecpntPackg(pushVo);
		model.addAttribute("pushRecpntPackg", pushRecpntPackg);
		model.addAttribute("pushVo", pushVo);
				
		return "custmr/push/PushNotfcatnRecpntPacakgPopup";
	}
	/**
	* 푸시 알림 수신자 패키지 선택 시 고객 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushRecpntPackgAplctnPushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushRecpntPackgAplctnCustmr.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushRecpntPackgAplctnCustmr(Model model, PushValueObject pushRecpntPackgAplctnPushVo)throws Exception{
		Logger.info("푸시알림  수신자 패키지 선택 시 고객 조회 컨트롤러 입니다.");
		List<PushValueObject> pushRecpntPackgAplctnCustmr = pushService.pushRecpntPackgAplctnCustmr(pushRecpntPackgAplctnPushVo);
		model.addAttribute("pushRecpntPackgCustmr", pushRecpntPackgAplctnCustmr);
		model.addAttribute("pushRecpntPackgPushVo", pushRecpntPackgAplctnPushVo);
 		
		return "custmr/push/PushNotfcatnRecpntPacakgPopup";
	}
	/**
	* 푸시 알림 수신자 다함께 상품 구매 팝업 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushRecpntGropPurchsPopup.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushRecpntGropPurchsCustmr(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시알림 다함께 상품 구매 팝업 조회 컨트롤러 입니다.");
		List<PushValueObject> pushRecpntGropPurchs = pushService.pushRecpntGropPurchs(pushVo);
		model.addAttribute("pushRecpntGropPurchs", pushRecpntGropPurchs);
		model.addAttribute("pushVo", pushVo);
 		
		return "custmr/push/PushNotfcatnRecpntGropPurchsPopup";
	}
	/**
	* 푸시 알림 수신자 다함께 상품 신청 고객 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushRecpntGropPurchsAplctnCustmrVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushRecpntGropPurchsAplctnCustmr.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushRecpntGropPurchsAplctnCustmr(Model model, PushValueObject pushRecpntGropPurchsAplctnCustmrVo)throws Exception{
		Logger.info("푸시알림 다함께 상품 신청 고객 조회 컨트롤러 입니다.");
		List<PushValueObject> pushRecpntGropPurchsAplctnCustmr = pushService.pushRecpntGropPurchsAplctnCustmr(pushRecpntGropPurchsAplctnCustmrVo);
		model.addAttribute("pushRecpntGropPurchsAplctnCustmr", pushRecpntGropPurchsAplctnCustmr);
		model.addAttribute("pushRecpntGropPurchsAplctnCustmrVo", pushRecpntGropPurchsAplctnCustmrVo);
 		
		return "custmr/push/PushNotfcatnRecpntGropPurchsPopup";
	}
	/**
	* 푸시 알림 발송 내역 조회를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushNotfcatnDespRecrdList.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushNotfcatnDespRecrdList(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시 발송 내역 조회 컨트롤러 입니다.");
		List<PushValueObject> pushNotfcatnDespRecrdList = pushService.pushNotfcatnDespRecrdList(pushVo);
		PushValueObject pushNotfcatnDespRecrdListSum = pushService.pushNotfcatnDespRecrdListSum();
		
		model.addAttribute("pushNotfcatnDespRecrdList", pushNotfcatnDespRecrdList);
		model.addAttribute("pushNotfcatnDespRecrdListSum", pushNotfcatnDespRecrdListSum);
		model.addAttribute("pushVo", pushVo);
		
		return "custmr/push/PushNotfcatnDespRecrdList";
	}
	/**
	* 푸시 알림 발송 내역 다시 보내기를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	//푸시 발송 내역 다시 보내기
	@RequestMapping(value = "/pushNotfcatnReDesp.do", method={RequestMethod.GET,RequestMethod.POST})
	public String pushNotfcatnReDesp(Model model, PushValueObject pushVo)throws Exception{
		Logger.info("푸시 발송 내역 조회 컨트롤러 입니다.");
		PushValueObject pushNotfcatnReDesp = pushService.pushNotfcatnReDesp(pushVo);

		model.addAttribute("pushNotfcatnReDesp", pushNotfcatnReDesp);
		
		return "forward:/pushNotfcatnDespSelectList.do";
	}
	/**
	* 푸시 알림 발송 내역 삭제를 하는 메서드입니다.
	*
	* @param   Model model, PushValueObject pushVo
	* @return  String
	* @exception  예외처리 상황을 적어주세요
	*/
	@RequestMapping(value = "/pushNotfcatnDespRecrdDelete.do", method = RequestMethod.POST)
	public String pushNotfcatnDespRecrdDelete(PushValueObject pushValueObject) throws Exception {
		Logger.info("푸시알림 발송 내역 삭제 컨트롤러 입니다.");
		pushService.pushNotfcatnDespRecrdDelete(pushValueObject.getPushChkGroup());	
		return "forward:/pushNotfcatnDespRecrdList.do";
	}
}